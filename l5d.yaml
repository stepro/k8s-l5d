apiVersion: v1
kind: ConfigMap
metadata:
  name: l5d
  labels:
    run: l5d
data:
  nginx.conf.tmpl: |-
    worker_processes 1;
    events {
      worker_connections 1024;
    }
    http {
      server {
        listen 32080;
        return 444;
      }
      {{ range $svc := .items -}}
      {{ if eq $svc.kind "Service" -}}
      {{ $meta := $svc.metadata -}}
      {{ if $meta.labels -}}
      {{ $hash := index $meta.labels "hash.azp.io/baseline" -}}
      {{ if $hash -}}
      server {
        server_name {{$meta.name}}-{{$hash}}.azp.io;
        listen 32080;
        location / {
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header Context-Headers l5d-ctx-*;
          proxy_set_header l5d-ctx-deadline "";
          proxy_set_header l5d-ctx-trace "";
          proxy_set_header l5d-dtab "";
          proxy_set_header l5d-sample "";
          proxy_pass http://localhost;
        }
      }
      {{ end -}}
      {{ $hash := index $meta.labels "hash.azp.io/delta" -}}
      {{ if $hash -}}
      {{ range $cfg := $.items -}}
      {{ if and (eq $cfg.kind "ConfigMap") (eq $cfg.metadata.name "l5d-routes") -}}
      {{ range $routeName, $route := $cfg.data -}}
      server {
        server_name {{$meta.name}}-{{$routeName}}-{{$hash}}.azp.io;
        listen 32080;
        location / {
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header Context-Headers l5d-ctx-*;
          proxy_set_header l5d-ctx-deadline "";
          proxy_set_header l5d-ctx-trace "";
          proxy_set_header l5d-dtab "{{$route}}";
          proxy_set_header l5d-sample "";
          proxy_pass http://localhost;
        }
      }
      {{ end -}}
      {{ end -}}
      {{ end -}}
      {{ end -}}
      {{ end -}}
      {{ end -}}
      {{ end -}}
    }
  dtab.tmpl: |-
    {{/* Resolve services using Kubernetes DNS */ -}}
    /svc => /$/io.buoyant.rinet/$SVC_PORT ;

    {{/* Resolve baselines and deltas */ -}}
    {{ range $svc := .items -}}
    {{ if eq $svc.kind "Service" -}}
    {{ $meta := $svc.metadata -}}
    {{ if $meta.labels -}}
    {{ $base := index $meta.labels "azp.io/base" -}}
    {{ if $base -}}
    {{ $delta := index $meta.labels "azp.io/delta" -}}
    {{ if not $delta -}}
    /baseline/{{$base}} => /svc/{{$meta.name}} ;
    {{ else -}}
    /delta/{{$delta}}/{{$base}} => /svc/{{$meta.name}} ;
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}

    {{/* Resolve routes */}}
    /route => /baseline ;
    {{ range $svc := .items -}}
    {{ if eq $svc.kind "Service" -}}
    {{ $meta := $svc.metadata -}}
    {{ if $meta.annotations -}}
    {{ $route := index $meta.annotations "azp.io/route" -}}
    {{ if $route -}}
    /route/{{$meta.name}} => {{$route}} ;
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}

    {{/* Normalize host names */}}
    /host => /$/io.buoyant.http.subdomainOfPfx/$ENV_NAME.svc.cluster.local/host ;
    /host => /$/io.buoyant.http.subdomainOfPfx/$ENV_NAME.svc/host ;
    /host => /$/io.buoyant.http.subdomainOfPfx/$ENV_NAME/host ;
    {{ range $res := .items -}}
    {{ if eq $res.kind "Service" -}}
    {{ $meta := $res.metadata -}}
    {{ if and (ne $meta.name "l5d") (ne $meta.name "ingress-l5d") -}}
    {{ if $res.spec.selector.run -}}
    {{ if eq $res.spec.selector.run "l5d" -}}
    {{ $target := printf "/host/%s" $meta.name -}}
    {{ if $meta.labels -}}
    {{ $hash := index $meta.labels "hash.azp.io/delta" -}}
    {{ if $hash -}}
    {{ range $cfg := $.items -}}
    {{ if and (eq $cfg.kind "ConfigMap") (eq $cfg.metadata.name "l5d-routes") -}}
    {{ range $route, $unused := $cfg.data -}}
    /host/{{$meta.name}}-{{$route}}-{{$hash}}.azp.io:$SVC_PORT => {{$target}} ;
    /host/{{$meta.name}}-{{$route}}-{{$hash}}.azp.io => {{$target}} ;
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ $hash := index $meta.labels "hash.azp.io/baseline" -}}
    {{ if $hash -}}
    /host/{{$meta.name}}-{{$hash}}.azp.io:$SVC_PORT => {{$target}} ;
    /host/{{$meta.name}}-{{$hash}}.azp.io => {{$target}} ;
    {{ end -}}
    {{ end -}}
    {{ if $res.spec.clusterIP -}}
    /host/{{$res.spec.clusterIP}}:$SVC_PORT => {{$target}} ;
    /host/{{$res.spec.clusterIP}} => {{$target}} ;
    {{ end -}}
    /host/{{$meta.name}} => /route/{{$meta.name}} ;
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end -}}
  n4d.config.yaml: |-
    interfaces:
    - kind: io.l5d.httpController
      ip: 0.0.0.0
    - kind: io.l5d.thriftNameInterpreter
    namers: []
    storage:
      kind: io.l5d.inMemory
      namespaces:
        default:
  l5d.config.yaml: |-
    routers:
    - protocol: http
      servers:
      - ip: 0.0.0.0
        port: 80
      dstPrefix: /host
      interpreter:
        kind: io.l5d.namerd
        dst: /$/inet/localhost/4100
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: l5d
  labels:
    run: l5d
spec:
  replicas: 2
  selector:
    matchLabels:
      run: l5d
  template:
    metadata:
      labels:
        run: l5d
    spec:
      volumes:
      - name: l5d-config
        configMap:
          name: l5d
      containers:
      - name: ingress
        image: stephpr/k8s-nginx-n4d
        imagePullPolicy: Always
        volumeMounts:
        - name: l5d-config
          mountPath: /config
          readOnly: true
        env:
        - name: ENV_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SVC_PORT
          value: "80"
        - name: ENV_SUBST
          value: "$ENV_NAME $SVC_PORT"
        ports:
        - name: http-ingress
          containerPort: 32080
        args:
        - /config/nginx.conf.tmpl
        - /config/dtab.tmpl
        - configmap,service
      - name: n4d
        image: buoyantio/namerd:0.9.1
        volumeMounts:
        - name: l5d-config
          mountPath: /io.buoyant/namerd/config
          readOnly: true
        ports:
        - name: n4d-thrift
          containerPort: 4100
        - name: n4d-http
          containerPort: 4180
        - name: n4d-admin
          containerPort: 9991
        args:
        - /io.buoyant/namerd/config/n4d.config.yaml
        readinessProbe:
          tcpSocket:
            port: 9991
      - name: l5d
        image: buoyantio/linkerd:0.9.1
        volumeMounts:
        - name: l5d-config
          mountPath: /io.buoyant/linkerd/config
          readOnly: true
        ports:
        - name: http
          containerPort: 80
        - name: admin
          containerPort: 9990
        args:
        - /io.buoyant/linkerd/config/l5d.config.yaml
        readinessProbe:
          tcpSocket:
            port: 9990
---
apiVersion: v1
kind: Service
metadata:
  name: l5d
  labels:
    run: l5d
spec:
  selector:
    run: l5d
  type: ClusterIP
  ports:
  - name: http
    port: 80
  - name: api
    port: 4180
  - name: admin
    port: 9990
---
apiVersion: v1
kind: Service
metadata:
  name: l5d-ingress
  labels:
    run: l5d
spec:
  selector:
    run: l5d
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 32080
